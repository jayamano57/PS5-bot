{"ast":null,"code":"var _jsxFileName = \"/Users/jamano/Documents/Projects/PS5-bot/frontend/src/components/VendorForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport styled from 'styled-components';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport EmailForm from \"./EmailForm\";\nimport AddressForm from \"./AddressForm\";\nimport CreditCardForm from \"./CreditCardForm\";\nimport ScheduleForm from \"./ScheduleForm\";\nimport Summary from \"./Summary\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContainer = styled.div`\n    background-color: #e6e6e6;\n    box-shadow: 0 0 6px 4px #7a7a7a;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    border-radius: 1.6rem;\n    max-width: 81rem;\n    margin: auto;\n`;\n_c = ModalContainer;\nconst MuiStepper = styled(Stepper)`\n    background-color: transparent !important;\n`;\n_c2 = MuiStepper;\nconst MuiStep = styled(Step)`\n    .MuiStepConnector-root {\n        top: 1.2rem;\n    }\n    .MuiSvgIcon-root {\n        font-size: 2.4rem !important;\n        text {\n            font-size: .9rem;\n        }\n    }\n    .MuiStepIcon-active {\n        color: #895dc4 !important;\n    }\n    .MuiTypography-root {\n        font-size: 1.2rem;\n        margin-top: 1rem !important;\n    }\n`;\n_c3 = MuiStep;\nconst FormContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    margin: 5rem 0 2rem;\n`;\n_c4 = FormContainer;\nconst ButtonContainer = styled.div`\n    padding: 0 6rem;\n    display: flex;\n    justify-content: flex-end;\n    button {\n        margin-left: 2rem;\n    }\n`;\n_c5 = ButtonContainer;\nexport default function VendorForm({\n  handleClose,\n  vendor\n}) {\n  _s();\n\n  const [activeStep, setActiveStep] = useState(0); // form data\n\n  const [email, setEmail] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [address1, setAddress1] = useState('');\n  const [address2, setAddress2] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [zip, setZip] = useState('');\n  const [ccFirstName, setCcFirstName] = useState('');\n  const [ccLastName, setCcLastName] = useState('');\n  const [cardNumber, setCardNumber] = useState('');\n  const [ccMonth, setCcMonth] = useState('');\n  const [ccYear, setCcYear] = useState('');\n  const [cvv, setCvv] = useState('');\n  const [ccPhoneNumber, setCcPhoneNumber] = useState('');\n  const [scheduleDate, setScheduleDate] = useState('');\n  const [scheduleTime, setScheduleTime] = useState(''); // validation\n\n  const [emailValid, setEmailValid] = useState('');\n  const [firstNameValid, setFirstNameValid] = useState('');\n  const [lastNameValid, setLastNameValid] = useState('');\n  const [phoneNumberValid, setPhoneNumberValid] = useState('');\n  const [address1Valid, setAddress1Valid] = useState('');\n  const [cityValid, setCityValid] = useState('');\n  const [stateValid, setStateValid] = useState('');\n  const [zipValid, setZipValid] = useState('');\n  const [ccFirstNameValid, setCcFirstNameValid] = useState('');\n  const [ccLastNameValid, setCcLastNameValid] = useState('');\n  const [cardNumberValid, setCardNumberValid] = useState('');\n  const [ccMonthValid, setCcMonthValid] = useState('');\n  const [ccYearValid, setCcYearValid] = useState('');\n  const [cvvValid, setCvvValid] = useState('');\n  const [ccPhoneNumberValid, setCcPhoneNumberValid] = useState('');\n  const [scheduleDateValid, setScheduleDateValid] = useState('');\n  const [scheduleTimeValid, setScheduleTimeValid] = useState(''); // other state\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [watcher, setWatcher] = useState(false);\n\n  function getSteps() {\n    return ['Email', 'Address', 'Card Info', 'Schedule'];\n  }\n\n  function getStepContent(stepIndex) {\n    switch (stepIndex) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(EmailForm, {\n          email: email,\n          setEmail: setEmail,\n          emailValid: emailValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 20\n        }, this);\n\n      case 1:\n        return /*#__PURE__*/_jsxDEV(AddressForm, {\n          firstName: firstName,\n          setFirstName: setFirstName,\n          firstNameValid: firstNameValid,\n          lastName: lastName,\n          setLastName: setLastName,\n          lastNameValid: lastNameValid,\n          phoneNumber: phoneNumber,\n          setPhoneNumber: setPhoneNumber,\n          phoneNumberValid: phoneNumberValid,\n          address1: address1,\n          setAddress1: setAddress1,\n          address1Valid: address1Valid,\n          address2: address2,\n          setAddress2: setAddress2,\n          city: city,\n          setCity: setCity,\n          cityValid: cityValid,\n          state: state,\n          setState: setState,\n          stateValid: stateValid,\n          zip: zip,\n          setZip: setZip,\n          zipValid: zipValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 20\n        }, this);\n\n      case 2:\n        return /*#__PURE__*/_jsxDEV(CreditCardForm, {\n          firstName: ccFirstName,\n          setFirstName: setCcFirstName,\n          firstNameValid: ccFirstNameValid,\n          lastName: ccLastName,\n          setLastName: setCcLastName,\n          lastNameValid: ccLastNameValid,\n          cardNumber: cardNumber,\n          setCardNumber: setCardNumber,\n          cardNumberValid: cardNumberValid,\n          month: ccMonth,\n          setMonth: setCcMonth,\n          monthValid: ccMonthValid,\n          year: ccYear,\n          setYear: setCcYear,\n          yearValid: ccYearValid,\n          cvv: cvv,\n          setCvv: setCvv,\n          cvvValid: cvvValid,\n          phoneNumber: ccPhoneNumber,\n          setPhoneNumber: setCcPhoneNumber,\n          phoneNumberValid: ccPhoneNumberValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 20\n        }, this);\n\n      case 3:\n        return /*#__PURE__*/_jsxDEV(ScheduleForm, {\n          watcher: watcher,\n          setWatcher: e => setWatcher(e.target.checked),\n          scheduleDate: scheduleDate,\n          setScheduleDate: setScheduleDate,\n          scheduleDateValid: scheduleDateValid,\n          scheduleTime: scheduleTime,\n          setScheduleTime: setScheduleTime,\n          scheduleTimeValid: scheduleTimeValid\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 20\n        }, this);\n\n      default:\n        return 'Unknown stepIndex';\n    }\n  }\n\n  const steps = getSteps();\n\n  const handleNext = () => {\n    if (activeStep === 0 && validateEmailForm()) return;\n    if (activeStep === 1 && validateAddressForm()) return;\n    if (activeStep === 2 && validateCardForm()) return;\n    if (activeStep === 3 && validateScheduleForm()) return;\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }; // validation functions\n\n\n  const validateEmailForm = () => {\n    let message = '';\n\n    if (email.trim() === '') {\n      message = 'Please enter an email address';\n    } else if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) message = 'Please enter a valid email address';\n\n    setEmailValid(message);\n    return message;\n  };\n\n  const validateAddressForm = () => {\n    let invalid = false;\n    let firstNameValidMessage = '';\n    let lastNameValidMessage = '';\n    let phoneNumberValidMessage = '';\n    let address1ValidMessage = '';\n    let cityValidMessage = '';\n    let stateValidMessage = '';\n    let zipValidMessage = '';\n\n    if (firstName.trim() === \"\") {\n      invalid = true;\n      firstNameValidMessage = 'This field is required';\n    }\n\n    if (lastName.trim() === \"\") {\n      invalid = true;\n      lastNameValidMessage = 'This field is required';\n    }\n\n    if (phoneNumber.trim() === \"\") {\n      invalid = true;\n      phoneNumberValidMessage = 'This field is required';\n    }\n\n    if (address1.trim() === \"\") {\n      invalid = true;\n      address1ValidMessage = 'This field is required';\n    }\n\n    if (city.trim() === \"\") {\n      invalid = true;\n      cityValidMessage = 'This field is required';\n    }\n\n    if (state.trim() === \"\") {\n      invalid = true;\n      stateValidMessage = 'This field is required';\n    }\n\n    if (zip.trim() === \"\") {\n      invalid = true;\n      zipValidMessage = 'This field is required';\n    }\n\n    setFirstNameValid(firstNameValidMessage);\n    setLastNameValid(lastNameValidMessage);\n    setPhoneNumberValid(phoneNumberValidMessage);\n    setAddress1Valid(address1ValidMessage);\n    setCityValid(cityValidMessage);\n    setStateValid(stateValidMessage);\n    setZipValid(zipValidMessage);\n    return invalid;\n  };\n\n  const validateCardForm = () => {\n    let invalid = false;\n    let firstNameValidMessage = '';\n    let lastNameValidMessage = '';\n    let cardNumberValidMessage = '';\n    let monthValidMessage = '';\n    let yearValidMessage = '';\n    let cvvValidMessage = '';\n    let phoneValidMessage = '';\n\n    if (ccFirstName.trim() === '') {\n      invalid = true;\n      firstNameValidMessage = 'This field is required';\n    }\n\n    if (ccLastName.trim() === '') {\n      invalid = true;\n      lastNameValidMessage = 'This field is required';\n    }\n\n    if (cardNumber.trim() === '') {\n      invalid = true;\n      cardNumberValidMessage = 'This field is required';\n    }\n\n    if (cardNumber && !/^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/.test(cardNumber)) {\n      invalid = true;\n      cardNumberValidMessage = 'Please enter a valid credit card number';\n    }\n\n    if (ccMonth.trim() === '') {\n      invalid = true;\n      monthValidMessage = 'This field is required';\n    }\n\n    if (ccYear.trim() === '') {\n      invalid = true;\n      yearValidMessage = 'This field is required';\n    }\n\n    if (cvv.trim() === '') {\n      invalid = true;\n      cvvValidMessage = 'This field is required';\n    }\n\n    if (ccPhoneNumber.trim() === '') {\n      invalid = true;\n      phoneValidMessage = 'This field is required';\n    }\n\n    setCcFirstNameValid(firstNameValidMessage);\n    setCcLastNameValid(lastNameValidMessage);\n    setCardNumberValid(cardNumberValidMessage);\n    setCcMonthValid(monthValidMessage);\n    setCcYearValid(yearValidMessage);\n    setCvvValid(cvvValidMessage);\n    setCcPhoneNumberValid(phoneValidMessage);\n    return invalid;\n  };\n\n  const validateScheduleForm = () => {\n    let invalid = false;\n    let scheduleDateValidMessage = '';\n    let scheduleTimeValidMessage = '';\n    const date = new Date();\n    const year = date.getFullYear();\n    const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n    const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    const currentDate = `${year}-${month}-${day}`;\n    const dayInPast = scheduleDate < currentDate;\n    const hour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n    const min = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n    const currentTime = `${hour}:${min}`;\n    const timeInPast = scheduleTime <= currentTime;\n\n    if (scheduleDate.trim() === '') {\n      scheduleDateValidMessage = 'This field is required';\n      invalid = true;\n    }\n\n    if (dayInPast) {\n      scheduleDateValidMessage = 'This day has past';\n      invalid = true;\n    }\n\n    if (scheduleTime.trim() === '') {\n      scheduleTimeValidMessage = 'This field is required';\n      invalid = true;\n    }\n\n    if ((dayInPast || currentDate === scheduleDate) && timeInPast) {\n      scheduleTimeValidMessage = 'This time has passed';\n      invalid = true;\n    }\n\n    setScheduleDateValid(scheduleDateValidMessage);\n    setScheduleTimeValid(scheduleTimeValidMessage);\n    return invalid;\n  };\n\n  const buyPs5 = async () => {\n    const url = \"http://localhost:3000/api/schedule\";\n    const formData = {\n      vendor,\n      email,\n      firstName,\n      lastName,\n      phoneNumber,\n      address1,\n      address2,\n      city,\n      state,\n      zip,\n      ccFirstName,\n      ccLastName,\n      cardNumber,\n      ccMonth,\n      ccYear,\n      cvv,\n      ccPhoneNumber,\n      scheduleDate,\n      scheduleTime\n    };\n\n    try {\n      setIsLoading(true);\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      await response.json();\n      setIsLoading(false);\n      toast.success(\"Jay's bot has been notified about her task!\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      });\n      handleClose();\n    } catch (err) {\n      setIsLoading(false);\n      toast.error(err || 'An unknown error has occured', {\n        position: toast.POSITION.BOTTOM_LEFT\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ModalContainer, {\n      children: [/*#__PURE__*/_jsxDEV(MuiStepper, {\n        activeStep: activeStep,\n        alternativeLabel: true,\n        children: steps.map(label => /*#__PURE__*/_jsxDEV(MuiStep, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 23\n          }, this)\n        }, label, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), activeStep === steps.length ? /*#__PURE__*/_jsxDEV(Summary, {\n        email: email,\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        address1: address1,\n        address2: address2,\n        city: city,\n        state: state,\n        zip: zip,\n        ccFirstName: ccFirstName,\n        ccLastName: ccLastName,\n        cardNumber: cardNumber,\n        ccMonth: ccMonth,\n        ccYear: ccYear,\n        cvv: cvv,\n        ccPhoneNumber: ccPhoneNumber,\n        buyPs5: buyPs5,\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(FormContainer, {\n        children: [getStepContent(activeStep), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            disabled: activeStep === 0,\n            onClick: handleBack,\n            size: \"large\",\n            children: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleNext,\n            size: \"large\",\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 331,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VendorForm, \"K8GYhoanye/4H2SGcwhTrbkk2G8=\");\n\n_c6 = VendorForm;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ModalContainer\");\n$RefreshReg$(_c2, \"MuiStepper\");\n$RefreshReg$(_c3, \"MuiStep\");\n$RefreshReg$(_c4, \"FormContainer\");\n$RefreshReg$(_c5, \"ButtonContainer\");\n$RefreshReg$(_c6, \"VendorForm\");","map":{"version":3,"sources":["/Users/jamano/Documents/Projects/PS5-bot/frontend/src/components/VendorForm.jsx"],"names":["React","useState","styled","Stepper","Step","StepLabel","Button","EmailForm","AddressForm","CreditCardForm","ScheduleForm","Summary","toast","ModalContainer","div","MuiStepper","MuiStep","FormContainer","ButtonContainer","VendorForm","handleClose","vendor","activeStep","setActiveStep","email","setEmail","firstName","setFirstName","lastName","setLastName","phoneNumber","setPhoneNumber","address1","setAddress1","address2","setAddress2","city","setCity","state","setState","zip","setZip","ccFirstName","setCcFirstName","ccLastName","setCcLastName","cardNumber","setCardNumber","ccMonth","setCcMonth","ccYear","setCcYear","cvv","setCvv","ccPhoneNumber","setCcPhoneNumber","scheduleDate","setScheduleDate","scheduleTime","setScheduleTime","emailValid","setEmailValid","firstNameValid","setFirstNameValid","lastNameValid","setLastNameValid","phoneNumberValid","setPhoneNumberValid","address1Valid","setAddress1Valid","cityValid","setCityValid","stateValid","setStateValid","zipValid","setZipValid","ccFirstNameValid","setCcFirstNameValid","ccLastNameValid","setCcLastNameValid","cardNumberValid","setCardNumberValid","ccMonthValid","setCcMonthValid","ccYearValid","setCcYearValid","cvvValid","setCvvValid","ccPhoneNumberValid","setCcPhoneNumberValid","scheduleDateValid","setScheduleDateValid","scheduleTimeValid","setScheduleTimeValid","isLoading","setIsLoading","watcher","setWatcher","getSteps","getStepContent","stepIndex","e","target","checked","steps","handleNext","validateEmailForm","validateAddressForm","validateCardForm","validateScheduleForm","prevActiveStep","handleBack","message","trim","test","invalid","firstNameValidMessage","lastNameValidMessage","phoneNumberValidMessage","address1ValidMessage","cityValidMessage","stateValidMessage","zipValidMessage","cardNumberValidMessage","monthValidMessage","yearValidMessage","cvvValidMessage","phoneValidMessage","scheduleDateValidMessage","scheduleTimeValidMessage","date","Date","year","getFullYear","month","getMonth","day","getDate","currentDate","dayInPast","hour","getHours","min","getMinutes","currentTime","timeInPast","buyPs5","url","formData","response","fetch","method","headers","body","JSON","stringify","json","success","position","POSITION","BOTTOM_LEFT","err","error","map","label","length"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport styled from 'styled-components';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport EmailForm from \"./EmailForm\";\nimport AddressForm from \"./AddressForm\";\nimport CreditCardForm from \"./CreditCardForm\";\nimport ScheduleForm from \"./ScheduleForm\";\nimport Summary from \"./Summary\";\nimport { toast } from 'react-toastify';\n\nconst ModalContainer = styled.div`\n    background-color: #e6e6e6;\n    box-shadow: 0 0 6px 4px #7a7a7a;\n    padding: 2rem;\n    display: flex;\n    flex-direction: column;\n    border-radius: 1.6rem;\n    max-width: 81rem;\n    margin: auto;\n`\nconst MuiStepper = styled(Stepper)`\n    background-color: transparent !important;\n`\nconst MuiStep = styled(Step)`\n    .MuiStepConnector-root {\n        top: 1.2rem;\n    }\n    .MuiSvgIcon-root {\n        font-size: 2.4rem !important;\n        text {\n            font-size: .9rem;\n        }\n    }\n    .MuiStepIcon-active {\n        color: #895dc4 !important;\n    }\n    .MuiTypography-root {\n        font-size: 1.2rem;\n        margin-top: 1rem !important;\n    }\n`\nconst FormContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    margin: 5rem 0 2rem;\n`\nconst ButtonContainer = styled.div`\n    padding: 0 6rem;\n    display: flex;\n    justify-content: flex-end;\n    button {\n        margin-left: 2rem;\n    }\n`\n\nexport default function VendorForm({handleClose, vendor}) {\n    const [activeStep, setActiveStep] = useState(0);\n    // form data\n    const [email, setEmail] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [phoneNumber, setPhoneNumber] = useState('');\n    const [address1, setAddress1] = useState('');\n    const [address2, setAddress2] = useState('');\n    const [city, setCity] = useState('');\n    const [state, setState] = useState('');\n    const [zip, setZip] = useState('');\n    const [ccFirstName, setCcFirstName] = useState('');\n    const [ccLastName, setCcLastName] = useState('');\n    const [cardNumber, setCardNumber] = useState('');\n    const [ccMonth, setCcMonth] = useState('');\n    const [ccYear, setCcYear] = useState('');\n    const [cvv, setCvv] = useState('');\n    const [ccPhoneNumber, setCcPhoneNumber] = useState('');\n    const [scheduleDate, setScheduleDate] = useState('');\n    const [scheduleTime, setScheduleTime] = useState('');\n    // validation\n    const [emailValid, setEmailValid] = useState('');\n    const [firstNameValid, setFirstNameValid] = useState('');\n    const [lastNameValid, setLastNameValid] = useState('');\n    const [phoneNumberValid, setPhoneNumberValid] = useState('');\n    const [address1Valid, setAddress1Valid] = useState('');\n    const [cityValid, setCityValid] = useState('');\n    const [stateValid, setStateValid] = useState('');\n    const [zipValid, setZipValid] = useState('');\n    const [ccFirstNameValid, setCcFirstNameValid] = useState('');\n    const [ccLastNameValid, setCcLastNameValid] = useState('');\n    const [cardNumberValid, setCardNumberValid] = useState('');\n    const [ccMonthValid, setCcMonthValid] = useState('');\n    const [ccYearValid, setCcYearValid] = useState('');\n    const [cvvValid, setCvvValid] = useState('');\n    const [ccPhoneNumberValid, setCcPhoneNumberValid] = useState('');\n    const [scheduleDateValid, setScheduleDateValid] = useState('');\n    const [scheduleTimeValid, setScheduleTimeValid]= useState('');\n    // other state\n    const [isLoading, setIsLoading] = useState(false);\n    const [watcher, setWatcher] = useState(false);\n    \n\n    function getSteps() {\n      return ['Email', 'Address', 'Card Info', 'Schedule'];\n    }\n      \n    function getStepContent(stepIndex) {\n      switch (stepIndex) {\n        case 0:\n            return <EmailForm email={email} setEmail={setEmail} emailValid={emailValid}/>\n        case 1:\n            return <AddressForm firstName={firstName} setFirstName={setFirstName} firstNameValid={firstNameValid} lastName={lastName} setLastName={setLastName} lastNameValid={lastNameValid} phoneNumber={phoneNumber} setPhoneNumber={setPhoneNumber} phoneNumberValid={phoneNumberValid} address1={address1} setAddress1={setAddress1} address1Valid={address1Valid} address2={address2} setAddress2={setAddress2} city={city} setCity={setCity} cityValid={cityValid} state={state} setState={setState} stateValid={stateValid} zip={zip} setZip={setZip} zipValid={zipValid}/>\n        case 2:\n            return <CreditCardForm firstName={ccFirstName} setFirstName={setCcFirstName} firstNameValid={ccFirstNameValid} lastName={ccLastName} setLastName={setCcLastName} lastNameValid={ccLastNameValid} cardNumber={cardNumber} setCardNumber={setCardNumber} cardNumberValid={cardNumberValid} month={ccMonth} setMonth={setCcMonth} monthValid={ccMonthValid} year={ccYear} setYear={setCcYear} yearValid={ccYearValid} cvv={cvv} setCvv={setCvv} cvvValid={cvvValid} phoneNumber={ccPhoneNumber} setPhoneNumber={setCcPhoneNumber} phoneNumberValid={ccPhoneNumberValid} />\n        case 3:\n            return <ScheduleForm watcher={watcher} setWatcher={e => setWatcher(e.target.checked)} scheduleDate={scheduleDate} setScheduleDate={setScheduleDate} scheduleDateValid={scheduleDateValid} scheduleTime={scheduleTime} setScheduleTime={setScheduleTime} scheduleTimeValid={scheduleTimeValid} ></ScheduleForm>\n        default:\n          return 'Unknown stepIndex';\n      }\n    }\n      \n    const steps = getSteps();\n    \n    const handleNext = () => {\n        if (activeStep === 0 && validateEmailForm()) return;\n        if (activeStep === 1 && validateAddressForm()) return;\n        if (activeStep === 2 && validateCardForm()) return;\n        if (activeStep === 3 && validateScheduleForm()) return;\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n    \n    const handleBack = () => {\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    // validation functions\n    const validateEmailForm = () => {\n        let message = '';\n        if (email.trim() === '') {\n            message = 'Please enter an email address';\n        } else if (!/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email)) (\n            message = 'Please enter a valid email address'\n        )\n        setEmailValid(message);\n        return message\n    }\n\n    const validateAddressForm = () => {\n        let invalid = false;\n        let firstNameValidMessage = '';\n        let lastNameValidMessage = '';\n        let phoneNumberValidMessage = '';\n        let address1ValidMessage = '';\n        let cityValidMessage = '';\n        let stateValidMessage = '';\n        let zipValidMessage = '';\n        if (firstName.trim() === \"\") {\n            invalid = true;\n            firstNameValidMessage ='This field is required';\n        }\n        if (lastName.trim() === \"\") {\n            invalid = true;\n            lastNameValidMessage ='This field is required';\n        }\n        if (phoneNumber.trim() === \"\") {\n            invalid = true;\n            phoneNumberValidMessage = 'This field is required';\n        }\n        if (address1.trim() === \"\") {\n            invalid = true;\n            address1ValidMessage = 'This field is required';\n        }\n        if (city.trim() === \"\") {\n            invalid = true;\n            cityValidMessage = 'This field is required';\n        }\n        if (state.trim() === \"\") {\n            invalid = true;\n            stateValidMessage = 'This field is required';\n        }\n        if (zip.trim() === \"\") {\n            invalid = true;\n            zipValidMessage = 'This field is required';\n        }\n        setFirstNameValid(firstNameValidMessage);\n        setLastNameValid(lastNameValidMessage);\n        setPhoneNumberValid(phoneNumberValidMessage);\n        setAddress1Valid(address1ValidMessage);\n        setCityValid(cityValidMessage)\n        setStateValid(stateValidMessage)\n        setZipValid(zipValidMessage)\n\n        return invalid;\n    }\n\n    const validateCardForm = () => {\n        let invalid = false;\n        let firstNameValidMessage = ''\n        let lastNameValidMessage = ''\n        let cardNumberValidMessage = '';\n        let monthValidMessage = ''\n        let yearValidMessage = ''\n        let cvvValidMessage = ''\n        let phoneValidMessage = ''\n        if (ccFirstName.trim() === '') {\n            invalid = true;\n            firstNameValidMessage = 'This field is required'\n        }\n        if (ccLastName.trim() === '') {\n            invalid = true;\n            lastNameValidMessage ='This field is required';\n        }\n        if (cardNumber.trim() === '') {\n            invalid = true;\n            cardNumberValidMessage = 'This field is required';\n        }\n        if (cardNumber && !/^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/.test(cardNumber)) {\n            invalid = true;\n            cardNumberValidMessage = 'Please enter a valid credit card number'\n        }\n        if (ccMonth.trim() === '') {\n            invalid = true;\n            monthValidMessage = 'This field is required';\n        }\n        if (ccYear.trim() === '') {\n            invalid = true;\n            yearValidMessage = 'This field is required';\n        }\n        if (cvv.trim() === '') {\n            invalid = true;\n            cvvValidMessage = 'This field is required';\n        }\n        if (ccPhoneNumber.trim() === '') {\n            invalid = true;\n            phoneValidMessage = 'This field is required';\n        }\n\n        setCcFirstNameValid(firstNameValidMessage); \n        setCcLastNameValid(lastNameValidMessage)\n        setCardNumberValid(cardNumberValidMessage)\n        setCcMonthValid(monthValidMessage)\n        setCcYearValid(yearValidMessage)\n        setCvvValid(cvvValidMessage)\n        setCcPhoneNumberValid(phoneValidMessage)\n        return invalid;\n    }\n\n    const validateScheduleForm = () => {\n        let invalid = false;\n        let scheduleDateValidMessage = '';\n        let scheduleTimeValidMessage = '';\n        const date = new Date();\n        const year = date.getFullYear();\n        const month = date.getMonth() < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\n        const day = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n        const currentDate = `${year}-${month}-${day}`;\n        const dayInPast = scheduleDate < currentDate;\n        const hour = date.getHours() < 10 ? `0${date.getHours()}` : date.getHours();\n        const min = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n        const currentTime = `${hour}:${min}`;\n        const timeInPast = scheduleTime <= currentTime;\n        if (scheduleDate.trim() === '') {\n            scheduleDateValidMessage = 'This field is required';\n            invalid = true;\n        } \n        if (dayInPast) {\n            scheduleDateValidMessage = 'This day has past';\n            invalid = true;\n        }\n        if (scheduleTime.trim() === '') {\n            scheduleTimeValidMessage = 'This field is required';\n            invalid = true;\n        }\n        if ((dayInPast || currentDate === scheduleDate) && timeInPast) {\n            scheduleTimeValidMessage = 'This time has passed';\n            invalid = true;\n        }\n        setScheduleDateValid(scheduleDateValidMessage);\n        setScheduleTimeValid(scheduleTimeValidMessage);\n        return invalid\n    }\n\n    const buyPs5 = async () => {\n        const url = \"http://localhost:3000/api/schedule\";\n        const formData = {\n            vendor,\n            email,\n            firstName, \n            lastName,\n            phoneNumber, \n            address1,\n            address2, \n            city,\n            state,\n            zip,\n            ccFirstName,\n            ccLastName,\n            cardNumber,\n            ccMonth,\n            ccYear,\n            cvv,\n            ccPhoneNumber,\n            scheduleDate,\n            scheduleTime\n        }\n        try {\n            setIsLoading(true);\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(formData)\n            })\n            await response.json();\n            setIsLoading(false);\n            toast.success(\"Jay's bot has been notified about her task!\", {\n                position: toast.POSITION.BOTTOM_LEFT\n            });\n            handleClose();\n        } catch(err) {\n            setIsLoading(false);\n            toast.error(err || 'An unknown error has occured', {\n                position: toast.POSITION.BOTTOM_LEFT\n            });\n        }\n    }\n\n    return (\n        <div>\n            <ModalContainer>\n                <MuiStepper activeStep={activeStep} alternativeLabel>\n                  {steps.map((label) => (\n                    <MuiStep key={label}>\n                      <StepLabel>{label}</StepLabel>\n                    </MuiStep>\n                  ))}\n                </MuiStepper>\n                  {activeStep === steps.length ? (\n                        <Summary email={email} firstName={firstName} lastName={lastName} phoneNumber={phoneNumber} address1={address1} address2={address2} city={city} state={state} zip={zip} ccFirstName={ccFirstName} ccLastName={ccLastName} cardNumber={cardNumber} ccMonth={ccMonth} ccYear={ccYear} cvv={cvv} ccPhoneNumber={ccPhoneNumber} buyPs5={buyPs5} isLoading={isLoading}/>\n                  ) : (\n                    <FormContainer>\n                      {getStepContent(activeStep)}\n                      <ButtonContainer>\n                        <Button\n                          disabled={activeStep === 0}\n                          onClick={handleBack}\n                          size=\"large\"\n                        >\n                          Back\n                        </Button>\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleNext} size=\"large\">\n                          Next\n                        </Button>\n                      </ButtonContainer>\n                    </FormContainer>\n                  )}\n            </ModalContainer>\n      </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}